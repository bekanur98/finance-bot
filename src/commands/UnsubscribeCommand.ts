import type { CommandContext } from "grammy";
import type { CommandHandler } from "../types";
import { SubscriberService } from "../services/SubscriberService";

export class UnsubscribeCommand implements CommandHandler {
  private subscriberService: SubscriberService;

  constructor(subscriberService: SubscriberService) {
    this.subscriberService = subscriberService;
  }

  register(bot: any): void {
    bot.command("unsubscribe", this.execute.bind(this));
  }

  async execute(ctx: CommandContext<any>): Promise<void> {
    const userId = ctx.from?.id;

    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    if (!this.subscriberService.isSubscribed(userId)) {
      await ctx.reply("‚ÑπÔ∏è <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</b>\n\n–í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe", { parse_mode: "HTML" });
      return;
    }

    this.subscriberService.removeSubscriber(userId);

    await ctx.reply(
      "üëã <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</b>\n\n" +
      "–ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" +
      "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe",
      { parse_mode: "HTML" }
    );

    console.log(`User ${userId} unsubscribed. Total subscribers: ${this.subscriberService.getSubscriberCount()}`);
  }
}
