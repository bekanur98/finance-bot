import type { CommandContext } from "grammy";
import type { CommandHandler } from "../types";
import { NBKRParserService } from "../services/NBKRParserService";

export class CalcCommand implements CommandHandler {
  private parserService: NBKRParserService;

  constructor(parserService: NBKRParserService) {
    this.parserService = parserService;
  }

  register(bot: any): void {
    bot.command("calc", this.execute.bind(this));
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    bot.command("convert", this.execute.bind(this));
    bot.command("–∫—É—Ä—Å", this.execute.bind(this));
  }

  async execute(ctx: CommandContext<any>): Promise<void> {
    const args = ctx.match?.toString().trim();

    if (!args) {
      await ctx.reply(
        "üí± <b>–í–∞–ª—é—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n\n" +
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n" +
        "‚Ä¢ <code>/calc 100 USD</code> - —Å–∫–æ–ª—å–∫–æ —Å–æ–º–æ–≤ –≤ 100 –¥–æ–ª–ª–∞—Ä–∞—Ö\n" +
        "‚Ä¢ <code>/calc 5000 KGS to USD</code> - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–æ–ª–ª–∞—Ä—ã\n" +
        "‚Ä¢ <code>/calc 50 EUR to USD</code> - –∫—Ä–æ—Å—Å-–∫—É—Ä—Å\n\n" +
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n" +
        "USD, EUR, RUB, KZT, CNY, TRY, KGS",
        { parse_mode: "HTML" }
      );
      return;
    }

    try {
      const result = await this.parseAndCalculate(args);
      await ctx.reply(result, { parse_mode: "HTML" });
    } catch (error) {
      console.error("Calc error:", error);
      await ctx.reply(
        "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n" +
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞.\n" +
        "–ü—Ä–∏–º–µ—Ä: <code>/calc 100 USD</code>",
        { parse_mode: "HTML" }
      );
    }
  }

  private async parseAndCalculate(input: string): Promise<string> {
    // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: "100 USD to EUR" –∏–ª–∏ "100 USD"
    const regex = /(\d+(?:\.\d+)?)\s*([A-Z]{3})(?:\s+to\s+([A-Z]{3}))?/i;
    const match = input.match(regex);

    if (!match) {
      throw new Error("Invalid format");
    }

    const amountStr = match[1];
    if (!amountStr) {
      throw new Error("Amount not found");
    }

    const amount = parseFloat(amountStr);
    const fromCurrency = match[2] ? match[2].toUpperCase() : "";
    const toCurrency = match[3] ? match[3].toUpperCase() : "KGS";

    if (!fromCurrency) {
      throw new Error("Currency not specified");
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
    const rates = await this.parserService.getCurrencyRates();

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫—É—Ä—Å–æ–≤ (–≤—Å–µ –∫—É—Ä—Å—ã –∫ —Å–æ–º—É)
    const rateMap = new Map<string, number>();
    rateMap.set("KGS", 1); // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞

    rates.forEach(rate => {
      const numericRate = parseFloat(rate.rate.replace(",", "."));
      if (!isNaN(numericRate)) {
        rateMap.set(rate.currency, numericRate);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç
    if (!rateMap.has(fromCurrency)) {
      throw new Error(`–í–∞–ª—é—Ç–∞ ${fromCurrency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    }
    if (!rateMap.has(toCurrency)) {
      throw new Error(`–í–∞–ª—é—Ç–∞ ${toCurrency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let result: number;

    if (fromCurrency === "KGS") {
      // –ò–∑ —Å–æ–º–æ–≤ –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É
      const rate = rateMap.get(toCurrency)!;
      result = amount / rate;
    } else if (toCurrency === "KGS") {
      // –ò–∑ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç—ã –≤ —Å–æ–º—ã
      const rate = rateMap.get(fromCurrency)!;
      result = amount * rate;
    } else {
      // –ö—Ä–æ—Å—Å-–∫—É—Ä—Å (—á–µ—Ä–µ–∑ —Å–æ–º—ã)
      const fromRate = rateMap.get(fromCurrency)!;
      const toRate = rateMap.get(toCurrency)!;
      const inKgs = amount * fromRate;
      result = inKgs / toRate;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const formattedAmount = this.formatNumber(amount);
    const formattedResult = this.formatNumber(result);

    const fromFlag = this.getCurrencyFlag(fromCurrency);
    const toFlag = this.getCurrencyFlag(toCurrency);

    let response = `üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç</b>\n\n`;
    response += `${fromFlag} <b>${formattedAmount} ${fromCurrency}</b>  =  ${toFlag} <b>${formattedResult} ${toCurrency}</b>\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å
    if (fromCurrency !== "KGS" && toCurrency === "KGS") {
      const rate = rateMap.get(fromCurrency)!;
      response += `üìà –ö—É—Ä—Å: 1 ${fromCurrency} = ${this.formatNumber(rate)} KGS\n`;
    } else if (fromCurrency === "KGS" && toCurrency !== "KGS") {
      const rate = rateMap.get(toCurrency)!;
      response += `üìà –ö—É—Ä—Å: 1 ${toCurrency} = ${this.formatNumber(rate)} KGS\n`;
    }

    response += `\n<i>üìä –î–∞–Ω–Ω—ã–µ –ù–ë–ö–† –Ω–∞ ${new Date().toLocaleDateString('ru-RU')}</i>`;

    return response;
  }

  private formatNumber(num: number): string {
    return num.toFixed(4);
  }

  private getCurrencyFlag(currency: string): string {
    const flags: Record<string, string> = {
      "USD": "üá∫üá∏",
      "EUR": "üá™üá∫",
      "RUB": "üá∑üá∫",
      "KZT": "üá∞üáø",
      "CNY": "üá®üá≥",
      "TRY": "üáπüá∑",
      "KGS": "üá∞üá¨"
    };
    return flags[currency] || "üí±";
  }
}
