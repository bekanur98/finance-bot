import type { CommandContext } from "grammy";
import type { CommandHandler } from "../types";
import { StockService } from "../services/StockService";
import { KeyboardService } from "../services/KeyboardService";

export class StockCommand implements CommandHandler {
  private stockService: StockService;

  constructor(stockService: StockService) {
    this.stockService = stockService;
  }

  register(bot: any): void {
    bot.command("stocks", this.execute.bind(this));
    bot.command("–∞–∫—Ü–∏–∏", this.execute.bind(this));
  }

  async execute(ctx: CommandContext<any>): Promise<void> {
    const args = ctx.match?.toString().trim();

    if (!args) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∞–∫—Ü–∏–π
      await this.showTopStocks(ctx);
    } else {
      // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ü–∏–∏
      await this.searchStock(ctx, args);
    }
  }

  private async showTopStocks(ctx: CommandContext<any>): Promise<void> {
    const loadingMessage = await ctx.reply("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-10 –∞–∫—Ü–∏–π –°–®–ê...");

    try {
      const topStocks = await this.stockService.getTopStocks();

      if (topStocks.length === 0) {
        await ctx.api.editMessageText(
          ctx.chat.id,
          loadingMessage.message_id,
          "‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö",
          { parse_mode: "HTML" }
        );
        return;
      }

      let message = `üìà <b>–¢–æ–ø-10 –∞–∫—Ü–∏–π –°–®–ê</b>\n`;
      message += `üìÖ <i>${new Date().toLocaleDateString('ru-RU')}</i>\n\n`;

      topStocks.forEach((stock, index) => {
        const flag = this.stockService.getStockFlag(stock.symbol);
        const price = this.stockService.formatPrice(stock.price);
        const change = this.stockService.formatChange(stock.change, stock.changePercent);

        message += `${index + 1}. ${flag} <b>${stock.symbol}</b>\n`;
        message += `‚îú –¶–µ–Ω–∞: <code>${price}</code>\n`;
        message += `‚îî –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${change}\n\n`;
      });

      message += `üí° <b>–ü–æ–∏—Å–∫ –∞–∫—Ü–∏–π:</b> <code>/stocks AAPL</code>\n`;
      message += `üìä <i>–î–∞–Ω–Ω—ã–µ: Alpha Vantage</i>`;

      await ctx.api.editMessageText(
        ctx.chat.id,
        loadingMessage.message_id,
        message,
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getStockMenu()
        }
      );

    } catch (error) {
      console.error("Error showing top stocks:", error);
      await ctx.api.editMessageText(
        ctx.chat.id,
        loadingMessage.message_id,
        "‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö",
        { parse_mode: "HTML" }
      );
    }
  }

  private async searchStock(ctx: CommandContext<any>, query: string): Promise<void> {
    const loadingMessage = await ctx.reply(`‚è≥ –ü–æ–∏—Å–∫ –∞–∫—Ü–∏–π: "${query}"...`);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ —ç—Ç–æ —Ç–∏–∫–µ—Ä
      if (query.length <= 5 && /^[A-Z]+$/i.test(query)) {
        const quote = await this.stockService.getStockQuote(query.toUpperCase());
        if (quote) {
          await this.showStockQuote(ctx, loadingMessage.message_id, quote);
          return;
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
      const searchResults = await this.stockService.searchStock(query);

      if (searchResults.length === 0) {
        await ctx.api.editMessageText(
          ctx.chat.id,
          loadingMessage.message_id,
          `‚ùå <b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.`,
          { parse_mode: "HTML" }
        );
        return;
      }

      let message = `üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"</b>\n\n`;

      searchResults.slice(0, 5).forEach((result, index) => {
        message += `${index + 1}. <b>${result.symbol}</b>\n`;
        message += `‚îú ${result.name}\n`;
        message += `‚îú –¢–∏–ø: ${result.type}\n`;
        message += `‚îî –†–µ–≥–∏–æ–Ω: ${result.region}\n\n`;
      });

      if (searchResults[0]) {
        message += `üí° <b>–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É:</b> <code>/stocks ${searchResults[0].symbol}</code>`;
      }

      await ctx.api.editMessageText(
        ctx.chat.id,
        loadingMessage.message_id,
        message,
        { parse_mode: "HTML" }
      );

    } catch (error) {
      console.error("Error searching stock:", error);
      await ctx.api.editMessageText(
        ctx.chat.id,
        loadingMessage.message_id,
        "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        { parse_mode: "HTML" }
      );
    }
  }

  private async showStockQuote(ctx: CommandContext<any>, messageId: number, quote: any): Promise<void> {
    const flag = this.stockService.getStockFlag(quote.symbol);
    const price = this.stockService.formatPrice(quote.price);
    const change = this.stockService.formatChange(quote.change, quote.changePercent);

    let message = `${flag} <b>${quote.symbol}</b>\n`;
    message += `üìä ${quote.name}\n\n`;
    message += `üí∞ <b>–¶–µ–Ω–∞:</b> <code>${price}</code>\n`;
    message += `üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> ${change}\n`;
    message += `üìä <b>–û–±—ä–µ–º:</b> <code>${quote.volume.toLocaleString()}</code>\n\n`;
    message += `‚è∞ <i>${new Date().toLocaleString('ru-RU')}</i>\n`;
    message += `üìä <i>–î–∞–Ω–Ω—ã–µ: Alpha Vantage</i>`;

    await ctx.api.editMessageText(
      ctx.chat.id,
      messageId,
      message,
      {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getStockDetailsMenu(quote.symbol)
      }
    );
  }
}
