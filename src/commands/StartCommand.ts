import type { CommandContext } from "grammy";
import type { CommandHandler } from "../types";
import { KeyboardService } from "../services/KeyboardService";

export class StartCommand implements CommandHandler {
  register(bot: any): void {
    bot.command("start", this.execute.bind(this));
  }

  async execute(ctx: CommandContext<any>): Promise<void> {
    if (ctx.from !== undefined) {
      console.log(ctx.from.id);
    }

    const userName = ctx.from?.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    const isGroup = ctx.chat.type !== 'private';

    let welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!

ü§ñ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –ù–ë–ö–†</b>
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ

üìä <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</b>
üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ
üßÆ –í–∞–ª—é—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –±—ã—Å—Ç—Ä—ã–º –≤–≤–æ–¥–æ–º
üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üìà <b>–õ–∏–±–æ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /calc 100 USD - –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç
‚Ä¢ /exchange - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
‚Ä¢ /help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
    `;

    if (!isGroup) {
      welcomeMessage += `\nüîî <b>–î–æ—Å—Ç—É–ø–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 09:05</b>`;
    } else {
      welcomeMessage += `\nüè¢ <b>–î–ª—è –≥—Ä—É–ø–ø –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>`;
    }

    welcomeMessage += `\n\n‚ö°Ô∏è –ù–∞—á–Ω–∏—Ç–µ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é! üëá`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await ctx.reply(welcomeMessage, {
      parse_mode: "HTML",
      reply_markup: KeyboardService.getMainMenu()
    });

    // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–∏–∑—É
    if (!isGroup) {
      await ctx.reply("üî• <b>–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:</b>", {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getPersistentKeyboard()
      });
    }
  }
}
