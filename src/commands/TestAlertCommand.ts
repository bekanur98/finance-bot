import type { CommandContext } from "grammy";
import type { CommandHandler } from "../types";
import { AlertMonitorService } from "../services/AlertMonitorService";

export class TestAlertCommand implements CommandHandler {
  private alertMonitorService: AlertMonitorService;

  constructor(alertMonitorService: AlertMonitorService) {
    this.alertMonitorService = alertMonitorService;
  }

  register(bot: any): void {
    bot.command("test_alerts", this.execute.bind(this));
    bot.command("—Ç–µ—Å—Ç_–∞–ª–µ—Ä—Ç–æ–≤", this.execute.bind(this));
  }

  async execute(ctx: CommandContext<any>): Promise<void> {
    const userId = ctx.from?.id;

    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞)
    const adminIds = [393871193]; // –í–∞—à ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (!adminIds.includes(userId)) {
      await ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
      return;
    }

    await ctx.reply("üîç <b>–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–ª–µ—Ä—Ç–æ–≤...</b>\n\n–ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –∏ –∏—â—É —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –∞–ª–µ—Ä—Ç—ã...", {
      parse_mode: "HTML"
    });

    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–ª–µ—Ä—Ç–æ–≤
      await this.alertMonitorService.manualCheck();

      const stats = this.alertMonitorService.getMonitoringStats();

      await ctx.reply(
        `‚úÖ <b>–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n` +
        `‚îú –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç: <code>${stats.trackedCurrencies}</code>\n` +
        `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: <code>${stats.totalAlerts}</code>\n` +
        `‚îî –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>${stats.lastCheck?.toLocaleString('ru-RU')}</code>\n\n` +
        `üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –∏ –∫—É—Ä—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`,
        { parse_mode: "HTML" }
      );

    } catch (error) {
      console.error("Test alert error:", error);
      await ctx.reply("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.", {
        parse_mode: "HTML"
      });
    }
  }
}
