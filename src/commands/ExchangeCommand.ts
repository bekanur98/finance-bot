import type { CommandContext } from "grammy";
import type { CommandHandler } from "../types";
import { NBKRParserService } from "../services/NBKRParserService";
import { KeyboardService } from "../services/KeyboardService";

export class ExchangeCommand implements CommandHandler {
  private parserService: NBKRParserService;

  constructor(parserService: NBKRParserService) {
    this.parserService = parserService;
  }

  register(bot: any): void {
    bot.command("exchange", this.execute.bind(this));
  }

  async execute(ctx: CommandContext<any>): Promise<void> {
    const loadingMessage = await ctx.reply("‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...");

    try {
      console.log("Fetching currency data...");

      const today = new Date();
      const formattedDate = today.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });

      const rates = await this.parserService.getCurrencyRates();

      if (rates.length === 0) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç");
      }

      let result = `üí∞ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–ö–†</b>\nüìÖ <i>${formattedDate}</i>\n\n`;

      rates.forEach((rate) => {
        result += `${rate.flag} <b>${rate.currency}</b>  ‚û§  <code>${rate.rate}</code> —Å–æ–º\n`;
      });

      result += `\n<i>üìä –ò—Å—Ç–æ—á–Ω–∏–∫: –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ö–†</i>\n<i>üåê nbkr.kg</i>`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      const keyboard = KeyboardService.getQuickExchangeMenu();

      await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);
      await ctx.reply(result, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });

    } catch (error) {
      console.error("Exchange error:", error);

      try {
        await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);
      } catch (deleteError) {
        console.error("Error deleting loading message:", deleteError);
      }

      await ctx.reply("‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç", { parse_mode: "HTML" });
    }
  }
}
