import type { CommandContext } from "grammy";
import type { CommandHandler } from "../types";
import { AlertService } from "../services/AlertService";

export class AlertCommand implements CommandHandler {
  private alertService: AlertService;

  constructor(alertService: AlertService) {
    this.alertService = alertService;
  }

  register(bot: any): void {
    bot.command("alert", this.execute.bind(this));
    bot.command("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", this.execute.bind(this));
    bot.command("alerts", this.execute.bind(this));
    bot.command("–º–æ–∏_–∞–ª–µ—Ä—Ç—ã", this.showMyAlerts.bind(this));
    bot.command("myalerts", this.showMyAlerts.bind(this));
  }

  async execute(ctx: CommandContext<any>): Promise<void> {
    const args = ctx.match?.toString().trim();
    const userId = ctx.from?.id;

    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    if (!args) {
      await ctx.reply(
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n" +
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" +
        "‚Ä¢ <code>/alert USD 2%</code> - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ USD >2%\n" +
        "‚Ä¢ <code>/alert EUR 5%</code> - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ EUR >5%\n" +
        "‚Ä¢ <code>/alert list</code> - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤\n" +
        "‚Ä¢ <code>/–º–æ–∏_–∞–ª–µ—Ä—Ç—ã</code> - –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–µ—Ä—Ç–æ–≤\n" +
        "‚Ä¢ <code>/alert remove USD 2%</code> - —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç\n\n" +
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b> USD, EUR, RUB, KZT, CNY, TRY",
        { parse_mode: "HTML" }
      );
      return;
    }

    const parts = args.split(' ');
    const action = parts[0].toLowerCase();

    if (action === 'list') {
      await this.showUserAlerts(ctx, userId);
    } else if (action === 'remove' && parts.length >= 3) {
      const currency = parts[1].toUpperCase();
      const percentage = parseFloat(parts[2].replace('%', ''));
      await this.removeAlert(ctx, userId, currency, percentage);
    } else if (parts.length >= 2) {
      const currency = parts[0].toUpperCase();
      const threshold = parts[1];
      await this.addAlert(ctx, userId, currency, threshold);
    } else {
      await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alert –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
    }
  }

  async showMyAlerts(ctx: CommandContext<any>): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) {
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    await this.showUserAlerts(ctx, userId);
  }

  private async showUserAlerts(ctx: CommandContext<any>, userId: number): Promise<void> {
    const userAlerts = this.alertService.getUserAlerts(userId);

    if (userAlerts.length === 0) {
      await ctx.reply(
        "üìã <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã</b>\n\n" +
        "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n\n" +
        "üí° –°–æ–∑–¥–∞–π—Ç–µ –∞–ª–µ—Ä—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n" +
        "<code>/alert USD 2%</code> - –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USD –Ω–∞ 2% –∏–ª–∏ –±–æ–ª—å—à–µ",
        { parse_mode: "HTML" }
      );
      return;
    }

    let message = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n\n";

    userAlerts.forEach((alert, index) => {
      const currencyFlag = this.getCurrencyFlag(alert.currency);
      message += `${index + 1}. ${currencyFlag} <b>${alert.currency}</b> - <code>${alert.percentage}%</code>\n`;
      message += `   üìÖ –°–æ–∑–¥–∞–Ω: ${alert.createdAt.toLocaleDateString('ru-RU')}\n`;
      if (alert.lastTriggered) {
        message += `   üîî –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ: ${alert.lastTriggered.toLocaleDateString('ru-RU')}\n`;
      }
      message += `\n`;
    });

    message += `üîî <i>–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: ${userAlerts.length}</i>\n\n`;
    message += `üí° <b>–£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç:</b> <code>/alert remove USD 2%</code>`;

    await ctx.reply(message, { parse_mode: "HTML" });
  }

  private async addAlert(ctx: CommandContext<any>, userId: number, currency: string, threshold: string): Promise<void> {
    const supportedCurrencies = ['USD', 'EUR', 'RUB', 'KZT', 'CNY', 'TRY'];

    if (!supportedCurrencies.includes(currency)) {
      await ctx.reply("‚ùå –í–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: USD, EUR, RUB, KZT, CNY, TRY");
      return;
    }

    const numericThreshold = parseFloat(threshold.replace('%', ''));
    if (isNaN(numericThreshold) || numericThreshold <= 0 || numericThreshold > 100) {
      await ctx.reply("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0.1% –¥–æ 100%");
      return;
    }

    const success = this.alertService.addAlert(userId, currency, numericThreshold);

    if (success) {
      const currencyFlag = this.getCurrencyFlag(currency);
      await ctx.reply(
        `‚úÖ <b>–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
        `${currencyFlag} <b>${currency}</b> - <code>${numericThreshold}%</code>\n\n` +
        `üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—Å ${currency} –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ ${numericThreshold}% –∏–ª–∏ –±–æ–ª—å—à–µ\n\n` +
        `üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã: <code>/–º–æ–∏_–∞–ª–µ—Ä—Ç—ã</code>`,
        { parse_mode: "HTML" }
      );
    } else {
      await ctx.reply(
        `‚ö†Ô∏è <b>–ê–ª–µ—Ä—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n` +
        `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è <b>${currency}</b> —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º <b>${numericThreshold}%</b>\n\n` +
        `üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã: <code>/–º–æ–∏_–∞–ª–µ—Ä—Ç—ã</code>`,
        { parse_mode: "HTML" }
      );
    }
  }

  private async removeAlert(ctx: CommandContext<any>, userId: number, currency: string, percentage: number): Promise<void> {
    const success = this.alertService.removeUserAlert(userId, currency, percentage);

    if (success) {
      const currencyFlag = this.getCurrencyFlag(currency);
      await ctx.reply(
        `‚úÖ <b>–ê–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω</b>\n\n` +
        `${currencyFlag} <b>${currency}</b> - <code>${percentage}%</code>\n\n` +
        `üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–ª–µ—Ä—Ç—ã: <code>/–º–æ–∏_–∞–ª–µ—Ä—Ç—ã</code>`,
        { parse_mode: "HTML" }
      );
    } else {
      await ctx.reply(
        `‚ùå <b>–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n` +
        `–ê–ª–µ—Ä—Ç –¥–ª—è <b>${currency}</b> —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º <b>${percentage}%</b> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n` +
        `üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã: <code>/–º–æ–∏_–∞–ª–µ—Ä—Ç—ã</code>`,
        { parse_mode: "HTML" }
      );
    }
  }

  private getCurrencyFlag(currency: string): string {
    const flags: Record<string, string> = {
      "USD": "üá∫üá∏",
      "EUR": "üá™üá∫",
      "RUB": "üá∑üá∫",
      "KZT": "üá∞üáø",
      "CNY": "üá®üá≥",
      "TRY": "üáπüá∑",
      "KGS": "üá∞üá¨"
    };
    return flags[currency] || "üí±";
  }
}
