import { Bot } from "grammy";
import { DatabaseService } from "./services/DatabaseService";
import { SubscriberService } from "./services/SubscriberService";
import { GroupService } from "./services/GroupService";
import { NBKRParserService } from "./services/NBKRParserService";
import { SchedulerService } from "./services/SchedulerService";
import { StateManager } from "./services/StateManager";
import { CalculatorService } from "./services/CalculatorService";
import { CallbackHandler } from "./handlers/CallbackHandler";
import { StartCommand } from "./commands/StartCommand";
import { ExchangeCommand } from "./commands/ExchangeCommand";
import { GoldCommand } from "./commands/GoldCommand";
import { SubscribeCommand } from "./commands/SubscribeCommand";
import { UnsubscribeCommand } from "./commands/UnsubscribeCommand";
import { StatusCommand } from "./commands/StatusCommand";
import { StatsCommand } from "./commands/StatsCommand";
import { RegisterGroupCommand } from "./commands/RegisterGroupCommand";
import { UnregisterGroupCommand } from "./commands/UnregisterGroupCommand";
import { CalcCommand } from "./commands/CalcCommand";
import { HelpCommand } from "./commands/HelpCommand";
import { AlertCommand } from "./commands/AlertCommand";
import { KeyboardService } from "./services/KeyboardService";
import { AlertService } from "./services/AlertService";
import { AlertMonitorService } from "./services/AlertMonitorService";
import { TestAlertCommand } from "./commands/TestAlertCommand";
import { StockService } from "./services/StockService";
import { FavoriteStockService } from "./services/FavoriteStockService";
import { StockCommand } from "./commands/StockCommand";

// Create an instance of the `Bot` class and pass your bot token to it.
const bot = new Bot("985756606:AAEVuaQzTeDDo8ZVw4uygdXp8TfVYHPQfVQ");

console.warn("Bot is starting...");

// Initialize database and services
const dbService = new DatabaseService();
const subscriberService = new SubscriberService(dbService);
const groupService = new GroupService(dbService);
const parserService = new NBKRParserService();
const alertService = new AlertService(dbService);
const stockService = new StockService();
const favoriteStockService = new FavoriteStockService(dbService);
const alertMonitorService = new AlertMonitorService(alertService, parserService, dbService, bot);
const stateManager = new StateManager();
const calculatorService = new CalculatorService(parserService);
const schedulerService = new SchedulerService(subscriberService, groupService, parserService, bot);

// Initialize callback handler
const callbackHandler = new CallbackHandler(parserService, subscriberService, groupService, stateManager, calculatorService, alertService, stockService, favoriteStockService);

// Initialize commands
const commands = [
  new StartCommand(),
  new HelpCommand(),
  new ExchangeCommand(parserService),
  new GoldCommand(parserService),
  new StockCommand(stockService),
  new CalcCommand(parserService),
  new AlertCommand(alertService),
  new TestAlertCommand(alertMonitorService),
  new SubscribeCommand(subscriberService),
  new UnsubscribeCommand(subscriberService),
  new StatusCommand(subscriberService),
  new StatsCommand(subscriberService, groupService),
  new RegisterGroupCommand(groupService),
  new UnregisterGroupCommand(groupService)
];

// Register all commands
commands.forEach(command => {
  command.register(bot);
});

// Handle callback queries (inline button presses)
bot.on("callback_query", async (ctx) => {
  await callbackHandler.handleCallback(ctx as any);
});

// Handle messages from persistent keyboard
bot.on("message:text", async (ctx) => {
  const text = ctx.message.text;
  const userId = ctx.from?.id;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
  if (text.startsWith('/')) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  if (userId) {
    const userState = stateManager.getState(userId);

    if (userState && userState.action === 'calc_input') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      if (calculatorService.isValidAmount(text)) {
        const amount = parseFloat(text);
        const currency = userState.currency!;

        try {
          const result = await calculatorService.calculateCurrency(amount, currency, "KGS");

          await ctx.reply(result, {
            parse_mode: "HTML",
            reply_markup: KeyboardService.getMainMenu()
          });

          // –û—á–∏—â–∞–µ–º —Å–æ—Å—ÇÔøΩÔøΩ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
          stateManager.clearState(userId);
          return;

        } catch (error) {
          await ctx.reply(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞</b>\n\n" +
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            {
              parse_mode: "HTML",
              reply_markup: KeyboardService.getMainMenu()
            }
          );
          stateManager.clearState(userId);
          return;
        }
      } else {
        // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞
        await ctx.reply(
          "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞</b>\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0.01 –¥–æ 1,000,000,000\n" +
          "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>100</code> ÔøΩÔøΩ–ª–∏ <code>50.5</code>",
          {
            parse_mode: "HTML",
            reply_markup: KeyboardService.getAmountKeyboard()
          }
        );
        return;
      }
    } else if (userState && userState.action === 'alert_input') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∞–ª–µ—Ä—Ç–∞
      const percentMatch = text.match(/^(\d+(?:\.\d+)?)%?$/);
      if (percentMatch && percentMatch[1]) {
        const percent = parseFloat(percentMatch[1]);
        const currency = userState.currency!;

        if (percent > 0 && percent <= 100) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const success = alertService.addAlert(userId, currency, percent);

          if (success) {
            await ctx.reply(
              `‚úÖ <b>–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
              `üìä –í–∞–ª—é—Ç–∞: <b>${currency}</b>\n` +
              `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: <b>${percent}%</b>\n\n` +
              `üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—Å ${currency} –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ ${percent}% –∏–ª–∏ –±–æ–ª—å—à–µ`,
              {
                parse_mode: "HTML",
                reply_markup: KeyboardService.getMainMenu()
              }
            );
          } else {
            await ctx.reply(
              `‚ö†Ô∏è <b>–ê–ª–µ—Ä—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n` +
              `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è <b>${currency}</b> —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º <b>${percent}%</b>\n\n` +
              `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º`,
              {
                parse_mode: "HTML",
                reply_markup: KeyboardService.getMainMenu()
              }
            );
          }

          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
          stateManager.clearState(userId);
          return;
        } else {
          await ctx.reply(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç</b>\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0.1 –¥–æ 100\n" +
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>2%</code> –∏–ª–∏ <code>5</code>",
            {
              parse_mode: "HTML"
            }
          );
          return;
        }
      } else {
        await ctx.reply(
          "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n" +
          "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>2%</code> –∏–ª–∏ <code>5</code>\n" +
          "–ü—Ä–∏–º–µ—Ä—ã: 1%, 2.5%, 10%",
          {
            parse_mode: "HTML"
          }
        );
        return;
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  switch (text) {
    case "üí± –ö—É—Ä—Å—ã":
      const exchangeCmd = new ExchangeCommand(parserService);
      await exchangeCmd.execute(ctx as any);
      break;

    case "ü•á –ó–æ–ª–æ—Ç–æ":
      const goldCmd = new GoldCommand(parserService);
      await goldCmd.execute(ctx as any);
      break;

    case "üìà –ê–∫—Ü–∏–∏":
      const stockCmd = new StockCommand(stockService);
      await stockCmd.execute(ctx as any);
      break;

    case "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
      await ctx.reply(
        "üßÆ <b>–í–∞–ª—é—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n\n" +
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getCalcMenu()
        }
      );
      break;

    case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
      const statsCmd = new StatsCommand(subscriberService, groupService);
      await statsCmd.execute(ctx as any);
      break;

    case "üîî –ü–æ–¥–ø–∏—Å–∫–∞":
      if (userId) {
        const isSubscribed = subscriberService.isSubscribed(userId);
        await ctx.reply(
          "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n" +
          `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${isSubscribed ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}`,
          {
            parse_mode: "HTML",
            reply_markup: KeyboardService.getSubscriptionMenu(isSubscribed)
          }
        );
      }
      break;

    case "‚ùì –ü–æ–º–æ—â—å":
      const helpCmd = new HelpCommand();
      await helpCmd.execute(ctx as any);
      break;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Å—É–º–º –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    case "100":
    case "500":
    case "1000":
    case "5000":
    case "10000":
    case "50000":
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
      if (userId) {
        const userState = stateManager.getState(userId);

        if (userState && userState.action === 'calc_input') {
          const amount = parseFloat(text);
          const currency = userState.currency!;

          try {
            const result = await calculatorService.calculateCurrency(amount, currency, "KGS");

            await ctx.reply(result, {
              parse_mode: "HTML",
              reply_markup: KeyboardService.getMainMenu()
            });

            stateManager.clearState(userId);
            return;

          } catch (error) {
            await ctx.reply(
              "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞</b>\n\n" +
              "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.",
              {
                parse_mode: "HTML",
                reply_markup: KeyboardService.getMainMenu()
              }
            );
            stateManager.clearState(userId);
            return;
          }
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç
          await ctx.reply(
            `üí± <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: ${text} KGS</b>\n\n` +
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
            {
              parse_mode: "HTML",
              reply_markup: KeyboardService.getCurrencyMenu()
            }
          );
        }
      }
      break;

    case "‚ùå –û—Ç–º–µ–Ω–∞":
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—ÇÔøΩÔøΩ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
      if (userId) {
        stateManager.clearState(userId);
      }
      await ctx.reply(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getMainMenu()
        }
      );
      break;

    default:
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      // await ctx.reply(
      //   "ü§ñ <b>–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É</b>\n\n" +
      //   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:",
      //   {
      //     parse_mode: "HTML",
      //     reply_markup: KeyboardService.getMainMenu()
      //   }
      // );
      break;
  }
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  stateManager.cleanup();
}, 10 * 60 * 1000);

// Start daily message scheduler
schedulerService.startDailyMessages();

// Start alert monitoring
alertMonitorService.startMonitoring();

// Handle other messages
bot.on("message", (ctx) => ctx.reply("Got another message!"));

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('üõë Shutting down bot...');
  dbService.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üõë Shutting down bot...');
  dbService.close();
  process.exit(0);
});

// Start the bot
bot.start();