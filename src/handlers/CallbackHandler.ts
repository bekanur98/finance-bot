import type { CallbackQueryContext } from "grammy";
import { KeyboardService } from "../services/KeyboardService";
import { NBKRParserService } from "../services/NBKRParserService";
import { SubscriberService } from "../services/SubscriberService";
import { GroupService } from "../services/GroupService";
import { StateManager } from "../services/StateManager";
import { CalculatorService } from "../services/CalculatorService";
import { InlineKeyboard } from "grammy";
import { AlertService } from "../services/AlertService";
import { StockService } from "../services/StockService";
import { FavoriteStockService } from "../services/FavoriteStockService";

export class CallbackHandler {
  private parserService: NBKRParserService;
  private subscriberService: SubscriberService;
  private groupService: GroupService;
  private stateManager: StateManager;
  private calculatorService: CalculatorService;
  private alertService: AlertService;
  private stockService: StockService;
  private favoriteStockService: FavoriteStockService;

  constructor(
    parserService: NBKRParserService,
    subscriberService: SubscriberService,
    groupService: GroupService,
    stateManager: StateManager,
    calculatorService: CalculatorService,
    alertService: AlertService,
    stockService: StockService,
    favoriteStockService: FavoriteStockService
  ) {
    this.parserService = parserService;
    this.subscriberService = subscriberService;
    this.groupService = groupService;
    this.stateManager = stateManager;
    this.calculatorService = calculatorService;
    this.alertService = alertService;
    this.stockService = stockService;
    this.favoriteStockService = favoriteStockService;
  }

  async handleCallback(ctx: CallbackQueryContext): Promise<void> {
    const data = ctx.callbackQuery.data;

    if (!data) return;

    try {
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "loading"
      await ctx.answerCallbackQuery();

        console.warn(data);

      switch (data) {
        case "main_menu":
          await this.showMainMenu(ctx);
          break;

        case "exchange":
          await this.showExchange(ctx);
          break;

        case "gold":
          await this.showGold(ctx);
          break;

        case "calc_menu":
          await this.showCalcMenu(ctx);
          break;

        case "alert_menu":
          await this.showAlertMenu(ctx);
          break;

        case "stats":
          await this.showStats(ctx);
          break;

        case "settings":
          await this.showSettings(ctx);
          break;

        case "help":
          await this.showHelp(ctx);
          break;

        // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–ª—é—Ç
        case "calc_usd":
        case "calc_eur":
        case "calc_rub":
        case "calc_kzt":
        case "calc_cny":
        case "calc_try":
          await this.showCurrencyCalc(ctx, data.split("_")[1].toUpperCase());
          break;

        // –ê–ª–µ—Ä—Ç—ã
        case "alert_add":
          await this.showAddAlert(ctx);
          break;

        case "alert_list":
          await this.showAlertList(ctx);
          break;

        // –ü–æ–¥–ø–∏—Å–∫–∞
        case "subscribe":
          await this.handleSubscribe(ctx);
          break;

        case "unsubscribe":
          await this.handleUnsubscribe(ctx);
          break;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        case "exchange_refresh":
          await this.refreshExchange(ctx);
          break;

        case "gold_refresh":
          await this.refreshGold(ctx);
          break;

        // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        case "quick_100":
        case "quick_500":
        case "quick_1000":
        case "quick_5000":
        case "quick_10000":
        case "quick_50000":
          await this.handleQuickAmount(ctx, data.split("_")[1]);
          break;

        case "calc_cancel":
          await this.handleCalcCancel(ctx);
          break;

        // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∞–ª–µ—Ä—Ç–∞
        case "alert_percent_1":
        case "alert_percent_2":
        case "alert_percent_5":
          await this.handleQuickPercent(ctx, data.split("_")[2]);
          break;

        // –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
        case "alert_remove":
          await this.showRemoveAlertMenu(ctx);
          break;

        // –ê–∫—Ü–∏–∏ –°–®–ê
        case "stocks":
          await this.showStocks(ctx);
          break;

        case "stocks_top":
          await this.showTopStocks(ctx);
          break;

        case "stocks_favorites":
          await this.showFavoriteStocks(ctx);
          break;

        case "stocks_search":
          await this.showStockSearch(ctx);
          break;

        case "stocks_refresh":
          await this.refreshStocks(ctx);
          break;

        default:
          if (data.startsWith("currency_")) {
            const currency = data.split("_")[1];
            await this.selectCurrency(ctx, currency);
          } else if (data.startsWith("confirm_")) {
            const action = data.split("_")[1];
            await this.handleConfirmation(ctx, action);
          } else if (data.startsWith("cancel_")) {
            await this.handleCancel(ctx);
          } else if (data.startsWith("remove_alert_")) {
            const alertId = parseInt(data.split("_")[2]);
            await this.handleRemoveAlert(ctx, alertId);
          }
          break;
      }
    } catch (error) {
      console.error("Callback error:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  }

  private async showMainMenu(ctx: CallbackQueryContext): Promise<void> {
    const keyboard = KeyboardService.getMainMenu();

    await ctx.editMessageText(
      "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
      {
        parse_mode: "HTML",
        reply_markup: keyboard
      }
    );
  }

  private async showExchange(ctx: CallbackQueryContext): Promise<void> {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
    await ctx.editMessageText("‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...");

    try {
      const rates = await this.parserService.getCurrencyRates();
      const today = new Date();
      const formattedDate = today.toLocaleDateString('ru-RU');

      let result = `üí∞ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–ö–†</b>\nüìÖ <i>${formattedDate}</i>\n\n`;

      rates.forEach(rate => {
        result += `${rate.flag} <b>${rate.currency}</b>  ‚û§  <code>${rate.rate}</code> —Å–æ–º\n`;
      });

      result += `\n<i>üìä –ò—Å—Ç–æ—á–Ω–∏–∫: –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ö–†</i>`;

      const keyboard = KeyboardService.getQuickExchangeMenu();

      await ctx.editMessageText(result, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });

    } catch (error) {
      await ctx.editMessageText(
        "‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getMainMenu()
        }
      );
    }
  }

  private async showGold(ctx: CallbackQueryContext): Promise<void> {
    await ctx.editMessageText("‚è≥ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ...");

    try {
      const prices = await this.parserService.getGoldPrices();
      const today = new Date();
      const formattedDate = today.toLocaleDateString('ru-RU');

      let result = `ü•á <b>–¶–µ–Ω—ã –∑–æ–ª–æ—Ç—ã—Ö –º–µ—Ä–Ω—ã—Ö —Å–ª–∏—Ç–∫–æ–≤</b>\nüìÖ <i>${formattedDate}</i>\n\n`;
      result += `<b>–ú–∞—Å—Å–∞ (–≥)    –ü–æ–∫—É–ø–∫–∞ (—Å–æ–º)    –ü—Ä–æ–¥–∞–∂–∞ (—Å–æ–º)</b>\n`;
      result += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

      prices.forEach(price => {
        const formattedMass = price.mass.padEnd(8);
        const formattedBuy = price.buyPrice.padEnd(12);
        result += `<code>${formattedMass} ${formattedBuy} ${price.sellPrice}</code>\n`;
      });

      result += `\n<i>üìä –ò—Å—Ç–æ—á–Ω–∏–∫: –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ö–†</i>`;

      const keyboard = KeyboardService.getGoldMenu();

      await ctx.editMessageText(result, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });

    } catch (error) {
      await ctx.editMessageText(
        "‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getMainMenu()
        }
      );
    }
  }

  private async showCalcMenu(ctx: CallbackQueryContext): Promise<void> {
    const keyboard = KeyboardService.getCalcMenu();

    await ctx.editMessageText(
      "üßÆ <b>–í–∞–ª—é—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
      {
        parse_mode: "HTML",
        reply_markup: keyboard
      }
    );
  }

  private async showCurrencyCalc(ctx: CallbackQueryContext, currency: string): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    this.stateManager.setState(userId, 'calc_input', { currency });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π
    await ctx.editMessageText(
      `üí± <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ${currency} ‚Üí KGS</b>\n\n` +
      "üí¨ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n" +
      `–ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –Ω–∞–ø–∏—à–µ—Ç–µ <code>100</code>, –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ–º–∞—Ö`,
      {
        parse_mode: "HTML",
        reply_markup: new InlineKeyboard()
          .text("100", "quick_100")
          .text("500", "quick_500")
          .text("1000", "quick_1000").row()
          .text("5000", "quick_5000")
          .text("10000", "quick_10000")
          .text("50000", "quick_50000").row()
          .text("‚ùå –û—Ç–º–µ–Ω–∞", "calc_cancel")
          .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
      }
    );
  }

  private async showAlertMenu(ctx: CallbackQueryContext): Promise<void> {
    const keyboard = KeyboardService.getAlertMenu();

    await ctx.editMessageText(
      "üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏</b>\n\n" +
      "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–∞:",
      {
        parse_mode: "HTML",
        reply_markup: keyboard
      }
    );
  }

  private async showStats(ctx: CallbackQueryContext): Promise<void> {
    const userStats = this.subscriberService.getStats();
    const groupCount = this.groupService.getGroupSubscriberCount();

    const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏:</b>
‚îú –ê–∫—Ç–∏–≤–Ω—ã–µ: <code>${userStats.activeSubscribers}</code>
‚îú –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: <code>${userStats.inactiveSubscribers}</code>
‚îî –í—Å–µ–≥–æ: <code>${userStats.totalSubscribers}</code>

üè¢ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>
‚îî –ê–∫—Ç–∏–≤–Ω—ã–µ: <code>${groupCount}</code>

üìà <b>–û–±—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>
‚îî <code>${userStats.activeSubscribers + groupCount}</code> –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π

üìÖ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}</i>
    `.trim();

    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      reply_markup: KeyboardService.getMainMenu()
    });
  }

  private async showSettings(ctx: CallbackQueryContext): Promise<void> {
    const keyboard = KeyboardService.getSettingsMenu();

    await ctx.editMessageText(
      "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n" +
      "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:",
      {
        parse_mode: "HTML",
        reply_markup: keyboard
      }
    );
  }

  private async showHelp(ctx: CallbackQueryContext): Promise<void> {
    const helpMessage = `
ü§ñ <b>–ü–æ–º–æ—â—å - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –ù–ë–ö–†</b>

üìä <b>–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:</b>
/exchange - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
/gold - –¶–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏
/calc 100 USD - –í–∞–ª—é—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîî <b>–ü–û–î–ü–ò–°–ö–ê:</b>
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É (09:05)
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
/status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏

üí° <b>–ü–†–ò–ú–ï–†–´ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê:</b>
‚Ä¢ /calc 100 USD - –≤ —Å–æ–º—ã
‚Ä¢ /calc 5000 KGS to USD - –≤ –¥–æ–ª–ª–∞—Ä—ã
‚Ä¢ /calc 50 EUR to USD - –∫—Ä–æ—Å—Å-–∫—É—Ä—Å

üåê <b>–î–∞–Ω–Ω—ã–µ:</b> –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ö–† (nbkr.kg)
‚è∞ <b>–†–∞—Å—Å—ã–ª–∫–∞:</b> –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:05
    `.trim();

    await ctx.editMessageText(helpMessage, {
      parse_mode: "HTML",
      reply_markup: KeyboardService.getMainMenu()
    });
  }

  private async handleSubscribe(ctx: CallbackQueryContext): Promise<void> {
    // –õ–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)
    await ctx.editMessageText(
      "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n" +
      "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 09:05",
      {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getMainMenu()
      }
    );
  }

  private async handleUnsubscribe(ctx: CallbackQueryContext): Promise<void> {
    // –õ–æ–≥–∏–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)
    await ctx.editMessageText(
      "üëã <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</b>\n\n" +
      "–ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
      {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getMainMenu()
      }
    );
  }

  private async refreshExchange(ctx: CallbackQueryContext): Promise<void> {
    await ctx.answerCallbackQuery({ text: "üîÑ –û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã...", show_alert: false });
    await this.showExchange(ctx);
  }

  private async refreshGold(ctx: CallbackQueryContext): Promise<void> {
    await ctx.answerCallbackQuery({ text: "üîÑ –û–±–Ω–æ–≤–ª—è—é —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ...", show_alert: false });
    await this.showGold(ctx);
  }

  private async selectCurrency(ctx: CallbackQueryContext, currency: string): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∞–ª–µ—Ä—Ç–∞
    this.stateManager.setState(userId, 'alert_input', { currency });

    await ctx.editMessageText(
      `üí± <b>–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: ${currency}</b>\n\n` +
      "üìä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∞–ª–µ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2%)\n\n" +
      "üí° –ë–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç",
      {
        parse_mode: "HTML",
        reply_markup: new InlineKeyboard()
          .text("1%", "alert_percent_1")
          .text("2%", "alert_percent_2")
          .text("5%", "alert_percent_5").row()
          .text("‚ùå –û—Ç–º–µ–Ω–∞", "main_menu")
      }
    );
  }

  private async handleConfirmation(ctx: CallbackQueryContext, action: string): Promise<void> {
    await ctx.editMessageText(
      `‚úÖ <b>–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</b>\n\n` +
      `–í—ã–ø–æ–ª–Ω—è—é: ${action}`,
      {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getMainMenu()
      }
    );
  }

  private async handleCancel(ctx: CallbackQueryContext): Promise<void> {
    await ctx.editMessageText(
      "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
      {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getMainMenu()
      }
    );
  }

  private async showAddAlert(ctx: CallbackQueryContext): Promise<void> {
    const keyboard = KeyboardService.getCurrencyMenu();

    await ctx.editMessageText(
      "üîî <b>–î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç</b>\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
      {
        parse_mode: "HTML",
        reply_markup: keyboard
      }
    );
  }

  private async showAlertList(ctx: CallbackQueryContext): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    const userAlerts = this.alertService.getUserAlerts(userId);

    if (userAlerts.length === 0) {
      await ctx.editMessageText(
        "üìã <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã</b>\n\n" +
        "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n\n" +
        "üí° –ù–∞–∂–º–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç\" —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–∞",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getAlertMenu()
        }
      );
    } else {
      let message = "üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n\n";

      userAlerts.forEach((alert, index) => {
        const currencyFlag = this.getCurrencyFlag(alert.currency);
        message += `${index + 1}. ${currencyFlag} <b>${alert.currency}</b> - <code>${alert.percentage}%</code>\n`;
        message += `   üìÖ –°–æ–∑–¥–∞–Ω: ${alert.createdAt.toLocaleDateString('ru-RU')}\n\n`;
      });

      message += `üîî <i>–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: ${userAlerts.length}</i>`;

      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getAlertMenu()
      });
    }
  }

  private getCurrencyFlag(currency: string): string {
    const flags: Record<string, string> = {
      "USD": "üá∫üá∏",
      "EUR": "üá™üá∫",
      "RUB": "üá∑üá∫",
      "KZT": "üá∞üáø",
      "CNY": "üá®üá≥",
      "TRY": "üáπüá∑",
      "KGS": "üá∞üá¨"
    };
    return flags[currency] || "üí±";
  }

  private async handleQuickAmount(ctx: CallbackQueryContext, amount: string): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const state = this.stateManager.getState(userId);
    const currency = state?.currency;

    if (!currency) {
      await ctx.answerCallbackQuery("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏");
      return;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º calculatorService –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
      const result = await this.calculatorService.calculateCurrency(parseFloat(amount), currency, "KGS");

      await ctx.editMessageText(result, {
        parse_mode: "HTML",
        reply_markup: new InlineKeyboard()
          .text("üîÑ –ï—â–µ —Ä–∞–∑", `calc_${currency.toLowerCase()}`)
          .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
      });

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
      this.stateManager.clearState(userId);

    } catch (error) {
      console.error("Quick calc error:", error);
      await ctx.editMessageText(
        "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞</b>\n\n" +
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getMainMenu()
        }
      );
      this.stateManager.clearState(userId);
    }
  }

  private async handleCalcCancel(ctx: CallbackQueryContext): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.stateManager.resetState(userId);

    await ctx.editMessageText(
      "‚ùå <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
      {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getMainMenu()
      }
    );
  }

  private async handleQuickPercent(ctx: CallbackQueryContext, percent: string): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const state = this.stateManager.getState(userId);
    const currency = state?.currency;

    if (!currency) {
      await ctx.answerCallbackQuery("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∞–ª–µ—Ä—Ç–∞");
      return;
    }

    const alertPercent = parseFloat(percent);

    if (isNaN(alertPercent)) {
      await ctx.answerCallbackQuery("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const success = this.alertService.addAlert(userId, currency, alertPercent);

    if (success) {
      await ctx.editMessageText(
        `‚úÖ <b>–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
        `üìä –í–∞–ª—é—Ç–∞: <b>${currency}</b>\n` +
        `üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: <b>${alertPercent}%</b>\n\n` +
        `üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—Å ${currency} –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ ${alertPercent}% –∏–ª–∏ –±–æ–ª—å—à–µ`,
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getMainMenu()
        }
      );
    } else {
      await ctx.editMessageText(
        `‚ö†Ô∏è <b>–ê–ª–µ—Ä—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n` +
        `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è <b>${currency}</b> —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º <b>${alertPercent}%</b>\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º`,
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getMainMenu()
        }
      );
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
    this.stateManager.clearState(userId);
  }

  private async showRemoveAlertMenu(ctx: CallbackQueryContext): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    const userAlerts = this.alertService.getUserAlerts(userId);

    if (userAlerts.length === 0) {
      await ctx.editMessageText(
        "üìã <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n" +
        "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getAlertMenu()
        }
      );
    } else {
      let message = "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–µ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n";

      userAlerts.forEach((alert, index) => {
        const currencyFlag = this.getCurrencyFlag(alert.currency);
        message += `${index + 1}. ${currencyFlag} <b>${alert.currency}</b> - <code>${alert.percentage}%</code>\n`;
        message += `   üìÖ –°–æ–∑–¥–∞–Ω: ${alert.createdAt.toLocaleDateString('ru-RU')}\n\n`;
      });

      message += `üîî <i>–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: ${userAlerts.length}</i>\n\n`;
      message += `‚ùå –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∞–ª–µ—Ä—Ç–æ–º –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
      const keyboard = new InlineKeyboard();

      userAlerts.forEach((alert, index) => {
        const currencyFlag = this.getCurrencyFlag(alert.currency);
        keyboard.text(
          `‚ùå ${currencyFlag} ${alert.currency} ${alert.percentage}%`,
          `remove_alert_${alert.id}`
        ).row();
      });

      keyboard.text("üîô –ù–∞–∑–∞–¥ –∫ –∞–ª–µ—Ä—Ç–∞–º", "alert_menu")
        .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu");

      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: keyboard
      });
    }
  }

  private async handleRemoveAlert(ctx: CallbackQueryContext, alertId: number): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª–µ—Ä—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const userAlerts = this.alertService.getUserAlerts(userId);
    const alertToRemove = userAlerts.find(alert => alert.id === alertId);

    if (!alertToRemove) {
      await ctx.answerCallbackQuery("‚ùå –ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∞–ª–µ—Ä—Ç –ø–æ ID
    const success = this.alertService.removeAlert(alertId, userId);

    if (success) {
      const currencyFlag = this.getCurrencyFlag(alertToRemove.currency);
      await ctx.editMessageText(
        `‚úÖ <b>–ê–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω!</b>\n\n` +
        `${currencyFlag} <b>${alertToRemove.currency}</b> - <code>${alertToRemove.percentage}%</code>\n\n` +
        `–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–∞ ${alertToRemove.currency} –Ω–∞ ${alertToRemove.percentage}%`,
        {
          parse_mode: "HTML",
          reply_markup: new InlineKeyboard()
            .text("üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", "alert_list")
            .text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")
        }
      );
    } else {
      await ctx.editMessageText(
        `‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n` +
        `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.`,
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getAlertMenu()
        }
      );
    }
  }

  private async showStocks(ctx: CallbackQueryContext): Promise<void> {
    await ctx.editMessageText("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø-10 –∞–∫—Ü–∏–π –°–®–ê...");

    try {
      const topStocks = await this.stockService.getTopStocks();

      if (topStocks.length === 0) {
        await ctx.editMessageText(
          "‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö\n\n" +
          "üí° –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤",
          {
            parse_mode: "HTML",
            reply_markup: KeyboardService.getMainMenu()
          }
        );
        return;
      }

      let message = `üìà <b>–¢–æ–ø-10 –∞–∫—Ü–∏–π –°–®–ê</b>\n`;
      message += `üìÖ <i>${new Date().toLocaleDateString('ru-RU')}</i>\n\n`;

      topStocks.forEach((stock, index) => {
        const flag = this.stockService.getStockFlag(stock.symbol);
        const price = this.stockService.formatPrice(stock.price);
        const change = this.stockService.formatChange(stock.change, stock.changePercent);

        message += `${index + 1}. ${flag} <b>${stock.symbol}</b>\n`;
        message += `‚îú –¶–µ–Ω–∞: <code>${price}</code>\n`;
        message += `‚îî ${change}\n\n`;
      });

      message += `üí° <b>–ü–æ–∏—Å–∫:</b> <code>/stocks AAPL</code>\n`;
      message += `üìä <i>–î–∞–Ω–Ω—ã–µ: Alpha Vantage</i>`;

      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getStockMenu()
      });

    } catch (error) {
      console.error("Error showing stocks:", error);
      await ctx.editMessageText(
        "‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getMainMenu()
        }
      );
    }
  }

  private async showTopStocks(ctx: CallbackQueryContext): Promise<void> {
    await this.showStocks(ctx); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥
  }

  private async showFavoriteStocks(ctx: CallbackQueryContext): Promise<void> {
    const userId = ctx.from?.id;
    if (!userId) return;

    const favorites = this.favoriteStockService.getUserFavorites(userId);

    if (favorites.length === 0) {
      await ctx.editMessageText(
        "‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏</b>\n\n" +
        "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π\n\n" +
        "üí° –î–æ–±–∞–≤—å—Ç–µ –∞–∫—Ü–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getFavoriteStocksMenu()
        }
      );
      return;
    }

    await ctx.editMessageText("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö...");

    try {
      let message = `‚≠ê <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏</b>\n`;
      message += `üìÖ <i>${new Date().toLocaleDateString('ru-RU')}</i>\n\n`;

      for (const favorite of favorites) {
        const quote = await this.stockService.getStockQuote(favorite.symbol);
        if (quote) {
          const flag = this.stockService.getStockFlag(quote.symbol);
          const price = this.stockService.formatPrice(quote.price);
          const change = this.stockService.formatChange(quote.change, quote.changePercent);

          message += `${flag} <b>${quote.symbol}</b>\n`;
          message += `‚îú –¶–µ–Ω–∞: <code>${price}</code>\n`;
          message += `‚îî ${change}\n\n`;
        }
      }

      message += `‚≠ê <i>–í—Å–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: ${favorites.length}</i>\n`;
      message += `üìä <i>–î–∞–Ω–Ω—ã–µ: Alpha Vantage</i>`;

      await ctx.editMessageText(message, {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getFavoriteStocksMenu()
      });

    } catch (error) {
      console.error("Error showing favorite stocks:", error);
      await ctx.editMessageText(
        "‚ùå <b>–û—à–∏–±–∫–∞</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö",
        {
          parse_mode: "HTML",
          reply_markup: KeyboardService.getFavoriteStocksMenu()
        }
      );
    }
  }

  private async showStockSearch(ctx: CallbackQueryContext): Promise<void> {
    await ctx.editMessageText(
      "üîç <b>–ü–æ–∏—Å–∫ –∞–∫—Ü–∏–π</b>\n\n" +
      "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞:\n" +
      "<code>/stocks AAPL</code> - –¥–ª—è –ø–æ–∏—Å–∫–∞ Apple\n" +
      "<code>/stocks Tesla</code> - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n" +
      "üí° –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ü–∏–∏ –Ω–∏–∂–µ:",
      {
        parse_mode: "HTML",
        reply_markup: KeyboardService.getPopularStocksMenu()
      }
    );
  }

  private async refreshStocks(ctx: CallbackQueryContext): Promise<void> {
    await ctx.answerCallbackQuery({ text: "üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏—è–º...", show_alert: false });
    await this.showStocks(ctx);
  }
}
