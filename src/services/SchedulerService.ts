import cron from "node-cron";
import { Bot } from "grammy";
import { SubscriberService } from "./SubscriberService";
import { GroupService } from "./GroupService";
import { NBKRParserService } from "./NBKRParserService";

export class SchedulerService {
  private subscriberService: SubscriberService;
  private groupService: GroupService;
  private parserService: NBKRParserService;
  private bot: Bot;

  constructor(subscriberService: SubscriberService, groupService: GroupService, parserService: NBKRParserService, bot: Bot) {
    this.subscriberService = subscriberService;
    this.groupService = groupService;
    this.parserService = parserService;
    this.bot = bot;
  }

  startDailyMessages(): void {
    // Schedule a message every day at 09:05 local time
    cron.schedule("5 5 * * *", async () => {
      console.log('üïê Starting daily financial report broadcast...');

      try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const [rates, goldPrices] = await Promise.all([
          this.parserService.getCurrencyRates(),
          this.parserService.getGoldPrices()
        ]);

        const today = new Date();
        const formattedDate = today.toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
        let exchangeMessage = `üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n`;
        exchangeMessage += `üí∞ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ù–ë–ö–†</b>\nüìÖ <i>${formattedDate}</i>\n\n`;

        rates.forEach(rate => {
          exchangeMessage += `${rate.flag} <b>${rate.currency}</b>  ‚û§  <code>${rate.rate}</code> —Å–æ–º\n`;
        });

        exchangeMessage += `\n<i>üìä –ò—Å—Ç–æ—á–Ω–∏–∫: –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ö–†</i>`;

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ –∑–æ–ª–æ—Ç–æ
        let goldMessage = `ü•á <b>–¶–µ–Ω—ã –∑–æ–ª–æ—Ç—ã—Ö –º–µ—Ä–Ω—ã—Ö —Å–ª–∏—Ç–∫–æ–≤</b>\nüìÖ <i>${formattedDate}</i>\n\n`;
        goldMessage += `<b>–ú–∞—Å—Å–∞ (–≥)    –ü–æ–∫—É–ø–∫–∞ (—Å–æ–º)    –ü—Ä–æ–¥–∞–∂–∞ (—Å–æ–º)</b>\n`;
        goldMessage += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

        goldPrices.forEach(price => {
          const formattedMass = price.mass.padEnd(8);
          const formattedBuy = price.buyPrice.padEnd(12);
          goldMessage += `<code>${formattedMass} ${formattedBuy} ${price.sellPrice}</code>\n`;
        });

        goldMessage += `\n<i>üìä –ò—Å—Ç–æ—á–Ω–∏–∫: –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ö–†</i>\n\n`;
        goldMessage += `üìà <i>–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ —É–¥–∞—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π!</i>`;

        // Send to individual subscribers
        const subscribers = this.subscriberService.getSubscribers();
        console.log(`üì® Sending financial report to ${subscribers.length} individual subscribers...`);

        for (const subscriber of subscribers) {
          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            await this.bot.api.sendMessage(subscriber.id, exchangeMessage, {
              parse_mode: "HTML"
            });

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ
            await this.bot.api.sendMessage(subscriber.id, goldMessage, {
              parse_mode: "HTML"
            });

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
            await new Promise(resolve => setTimeout(resolve, 100));

          } catch (error) {
            console.error(`Failed to send financial report to subscriber ${subscriber.id}:`, error);
          }
        }

        // Send to group subscribers
        const groupSubscribers = this.groupService.getGroupSubscribers();
        console.log(`üìä Sending financial report to ${groupSubscribers.length} group subscribers...`);

        for (const group of groupSubscribers) {
          try {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            const groupExchangeMessage = `üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${group.chatTitle || '–≥—Ä—É–ø–ø–∞'}!</b>\n\n` +
              exchangeMessage.substring(exchangeMessage.indexOf('üí∞'));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            await this.bot.api.sendMessage(group.chatId, groupExchangeMessage, {
              parse_mode: "HTML"
            });

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ
            await this.bot.api.sendMessage(group.chatId, goldMessage, {
              parse_mode: "HTML"
            });

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 200));

          } catch (error) {
            console.error(`‚ùå Failed to send to group ${group.chatId}:`, error);

            // Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—à–∏–±–∫–∏
            if (error && typeof error === 'object' && 'error_code' in error) {
              const telegramError = error as { error_code: number };
              if (telegramError.error_code === 403 || telegramError.error_code === 400) {
                console.log(`üóëÔ∏è Removing inactive group: ${group.chatId}`);
                this.groupService.removeGroupSubscriber(group.chatId);
              }
            }
          }
        }

        console.log('‚úÖ Daily financial report broadcast completed');

      } catch (error) {
        console.error('‚ùå Error during daily financial report broadcast:', error);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await this.sendFallbackMessages();
      }
    });

    console.log("Daily financial report scheduler started for users and groups");
  }

  private async sendFallbackMessages(): Promise<void> {
    console.log('üì® Sending fallback greeting messages...');

    const fallbackMessage = `üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n` +
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.\n` +
      `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫–æ–º–∞–Ω–¥–æ–π /exchange\n` +
      `–ê —Ü–µ–Ω—ã –Ω–∞ –∑–æ–ª–æ—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /gold\n\n` +
      `–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä`;

    // Send to individual subscribers
    const subscribers = this.subscriberService.getSubscribers();
    for (const subscriber of subscribers) {
      try {
        await this.bot.api.sendMessage(subscriber.id, fallbackMessage, {
          parse_mode: "HTML"
        });
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        console.error(`Failed to send fallback message to subscriber ${subscriber.id}:`, error);
      }
    }

    // Send to group subscribers
    const groupSubscribers = this.groupService.getGroupSubscribers();
    for (const group of groupSubscribers) {
      try {
        const groupFallbackMessage = `üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${group.chatTitle || '–≥—Ä—É–ø–ø–∞'}!</b>\n\n` +
          fallbackMessage.substring(fallbackMessage.indexOf('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é'));

        await this.bot.api.sendMessage(group.chatId, groupFallbackMessage, {
          parse_mode: "HTML"
        });
        await new Promise(resolve => setTimeout(resolve, 200));
      } catch (error) {
        console.error(`Failed to send fallback message to group ${group.chatId}:`, error);
      }
    }
  }
}
