import { NBKRParserService } from "./NBKRParserService";

export class CalculatorService {
  private parserService: NBKRParserService;

  constructor(parserService: NBKRParserService) {
    this.parserService = parserService;
  }

  async calculateCurrency(amount: number, fromCurrency: string, toCurrency: string = "KGS"): Promise<string> {
    try {
      const rates = await this.parserService.getCurrencyRates();

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫—É—Ä—Å–æ–≤ (–≤—Å–µ –∫—É—Ä—Å—ã –∫ —Å–æ–º—É)
      const rateMap = new Map<string, number>();
      rateMap.set("KGS", 1); // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞

      rates.forEach(rate => {
        const numericRate = parseFloat(rate.rate.replace(",", "."));
        if (!isNaN(numericRate)) {
          rateMap.set(rate.currency, numericRate);
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç
      if (!rateMap.has(fromCurrency)) {
        throw new Error(`–í–∞–ª—é—Ç–∞ ${fromCurrency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      }
      if (!rateMap.has(toCurrency)) {
        throw new Error(`–í–∞–ª—é—Ç–∞ ${toCurrency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      let result: number;

      if (fromCurrency === "KGS") {
        // –ò–∑ —Å–æ–º–æ–≤ –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É
        const rate = rateMap.get(toCurrency)!;
        result = amount / rate;
      } else if (toCurrency === "KGS") {
        // –ò–∑ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç—ã –≤ —Å–æ–º—ã
        const rate = rateMap.get(fromCurrency)!;
        result = amount * rate;
      } else {
        // –ö—Ä–æ—Å—Å-–∫—É—Ä—Å (—á–µ—Ä–µ–∑ —Å–æ–º—ã)
        const fromRate = rateMap.get(fromCurrency)!;
        const toRate = rateMap.get(toCurrency)!;
        const inKgs = amount * fromRate;
        result = inKgs / toRate;
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const formattedAmount = amount.toFixed(4);
      const formattedResult = result.toFixed(4);

      const fromFlag = this.getCurrencyFlag(fromCurrency);
      const toFlag = this.getCurrencyFlag(toCurrency);

      let response = `üí± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</b>\n\n`;
      response += `${fromFlag} <b>${formattedAmount} ${fromCurrency}</b>  =  ${toFlag} <b>${formattedResult} ${toCurrency}</b>\n\n`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å
      if (fromCurrency !== "KGS" && toCurrency === "KGS") {
        const rate = rateMap.get(fromCurrency)!;
        response += `üìà –ö—É—Ä—Å: 1 ${fromCurrency} = ${rate.toFixed(4)} KGS\n`;
      } else if (fromCurrency === "KGS" && toCurrency !== "KGS") {
        const rate = rateMap.get(toCurrency)!;
        response += `üìà –ö—É—Ä—Å: 1 ${toCurrency} = ${rate.toFixed(4)} KGS\n`;
      }

      response += `\n<i>üìä –î–∞–Ω–Ω—ã–µ –ù–ë–ö–† –Ω–∞ ${new Date().toLocaleDateString('ru-RU')}</i>`;

      return response;

    } catch (error) {
      console.error("Calculator error:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç");
    }
  }

  async getExchangeRate(fromCurrency: string, toCurrency: string = "KGS"): Promise<number> {
    try {
      const rates = await this.parserService.getCurrencyRates();

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫—É—Ä—Å–æ–≤ (–≤—Å–µ –∫—É—Ä—Å—ã –∫ —Å–æ–º—É)
      const rateMap = new Map<string, number>();
      rateMap.set("KGS", 1); // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞

      rates.forEach(rate => {
        const numericRate = parseFloat(rate.rate.replace(",", "."));
        if (!isNaN(numericRate)) {
          rateMap.set(rate.currency, numericRate);
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç
      if (!rateMap.has(fromCurrency)) {
        throw new Error(`–í–∞–ª—é—Ç–∞ ${fromCurrency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      }
      if (!rateMap.has(toCurrency)) {
        throw new Error(`–í–∞–ª—é—Ç–∞ ${toCurrency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –∫—É—Ä—Å
      if (fromCurrency === "KGS") {
        const rate = rateMap.get(toCurrency)!;
        return 1 / rate;
      } else if (toCurrency === "KGS") {
        return rateMap.get(fromCurrency)!;
      } else {
        // –ö—Ä–æ—Å—Å-–∫—É—Ä—Å (—á–µ—Ä–µ–∑ —Å–æ–º—ã)
        const fromRate = rateMap.get(fromCurrency)!;
        const toRate = rateMap.get(toCurrency)!;
        return fromRate / toRate;
      }

    } catch (error) {
      console.error("Get rate error:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã");
    }
  }

  private getCurrencyFlag(currency: string): string {
    const flags: Record<string, string> = {
      "USD": "üá∫üá∏",
      "EUR": "üá™üá∫",
      "RUB": "üá∑üá∫",
      "KZT": "üá∞üáø",
      "CNY": "üá®üá≥",
      "TRY": "üáπüá∑",
      "KGS": "üá∞üá¨"
    };
    return flags[currency] || "üí±";
  }

  isValidAmount(text: string): boolean {
    const num = parseFloat(text);
    return !isNaN(num) && num > 0 && num <= 1000000000; // –ú–∞–∫—Å–∏–º—É–º 1 –º–∏–ª–ª–∏–∞—Ä–¥
  }
}
